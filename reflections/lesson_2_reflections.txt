    Q.: What happens when you initialize a repository? Why do you need to do 
        it?
    
    A.: A .git folder is created, which is responsible to keep track of all the
        work that will be done in that respository. The repository now is a git
        one.
        It's necessary to initialize the repository to turn it into a git
        repository, and then start to keep track of all the work done in that
        directory and keep that folder under version control.
    
    Q.: How is the staging area different from the working directory and the
        repository? What value do you think it offers?
    
    A.: The staging area is a part of Git that permits the user to decide if
        those files inserted therein will be in the next commit or not. It is
        an intermediate area where the files stay before going to the 
        repository or be removed. So I think the staging area offers a great
        flexibility to the user in order to facilitate his/her work on files
        under version control.
    
    Q.: How can you use the staging area to make sure you have one commit per
        logical change?
    
    A.: It's possible to use the staging area to compare different versions of
        one file or several files with both the working directory and the 
        repository, and then guarantee that there is one commit per logical 
        change. For example, it's possible to use the git diff command, with no 
        arguments, to compare files in the staging area and those in the working
        directory to make sure that what it's being added to the staging area
        is what the user want to commit afterwards. Also it is possible to use
        the git diff --staged command to compare files in the staging area with
        those in the repository and decide if those ones needs to be committed
        or not.
    
    Q.: What are some situations when branches would be helpful in keeping your
        history organized? How would branches help?
    
    A.: Whenever the user wants to try something new in a project, but he/she
        doesn't know yet if it will work; whenever a programmer wants to
        implement new features in a project, in both situations it is always
        a good idea to use branches to keep the history well organized and do
        not polute the master branch.
